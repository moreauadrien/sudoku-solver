{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/solver/utils.ts","../../src/stores.js","../../src/notification_manager.js","../../src/Utils.svelte","../../src/solver/Hint.ts","../../src/solver/SolvingTechniques.ts","../../src/solver/solver.ts","../../src/task_manager.js","../../src/responsive.js","../../src/components/NumberButton.svelte","../../src/components/Keypad.svelte","../../src/components/Cell.svelte","../../src/components/Grid.svelte","../../src/icons/Candidates.svelte","../../src/icons/Hint.svelte","../../src/icons/Check.svelte","../../src/icons/Solve.svelte","../../src/icons/Erase.svelte","../../src/components/ToolbarElement.svelte","../../src/components/Toolbar.svelte","../../src/components/Notification.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.37.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","const getRows = (grid) => {\r\n    let rows = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        rows = [...rows, grid.slice(i * 9, 9 + i * 9)];\r\n    }\r\n    return rows;\r\n};\r\nconst getColumns = (grid) => {\r\n    let columns = [];\r\n    for (let i = 0; i < 9; i++) {\r\n        columns = [\r\n            ...columns,\r\n            [\r\n                grid[i + 9 * 0],\r\n                grid[i + 9 * 1],\r\n                grid[i + 9 * 2],\r\n                grid[i + 9 * 3],\r\n                grid[i + 9 * 4],\r\n                grid[i + 9 * 5],\r\n                grid[i + 9 * 6],\r\n                grid[i + 9 * 7],\r\n                grid[i + 9 * 8],\r\n            ],\r\n        ];\r\n    }\r\n    return columns;\r\n};\r\nconst getSquares = (grid) => {\r\n    let squares = [];\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            squares = [\r\n                ...squares,\r\n                [\r\n                    grid[0 + j * 3 + i * 27],\r\n                    grid[1 + j * 3 + i * 27],\r\n                    grid[2 + j * 3 + i * 27],\r\n                    grid[9 + j * 3 + i * 27],\r\n                    grid[10 + j * 3 + i * 27],\r\n                    grid[11 + j * 3 + i * 27],\r\n                    grid[18 + j * 3 + i * 27],\r\n                    grid[19 + j * 3 + i * 27],\r\n                    grid[20 + j * 3 + i * 27],\r\n                ],\r\n            ];\r\n        }\r\n    }\r\n    return squares;\r\n};\r\nconst isCandidate = (grid, index, value) => {\r\n    const rows = getRows(grid);\r\n    const cellRow = Math.floor(index / 9);\r\n    for (let cell of rows[cellRow]) {\r\n        if (cell.value === value)\r\n            return false;\r\n    }\r\n    const columns = getColumns(grid);\r\n    const cellColum = index % 9;\r\n    for (let cell of columns[cellColum]) {\r\n        if (cell.value === value)\r\n            return false;\r\n    }\r\n    const squares = getSquares(grid);\r\n    const x = Math.floor(cellRow / 3);\r\n    const y = Math.floor(cellColum / 3);\r\n    const cellSquare = x * 3 + y;\r\n    for (let cell of squares[cellSquare]) {\r\n        if (cell.value === value)\r\n            return false;\r\n    }\r\n    return true;\r\n};\r\nconst copyGrid = (grid) => {\r\n    let newGrid = [];\r\n    grid.forEach(cell => {\r\n        newGrid.push(Object.assign({}, cell));\r\n    });\r\n    return newGrid;\r\n};\r\nconst consoleLog = false;\r\nconst reducer = (accumulator, cell) => (cell.value) ? [...accumulator, cell.value] : accumulator;\r\nconst calculateCandidates = (grid) => {\r\n    grid = copyGrid(grid);\r\n    if (consoleLog)\r\n        console.groupCollapsed(\"candidates\");\r\n    if (consoleLog)\r\n        console.groupCollapsed(\"lines\");\r\n    //lines work\r\n    for (let i = 0; i < 9; i++) {\r\n        let lineNumbers = grid.slice(i * 9, i * 9 + 9).reduce(reducer, []);\r\n        if (consoleLog)\r\n            console.log(`line n°${i}`, lineNumbers);\r\n        let candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        candidates = candidates.filter(number => lineNumbers.indexOf(number) == -1);\r\n        for (let index = 0; index < 9; index++) {\r\n            let cell = grid[index + 9 * i];\r\n            if (cell.value == undefined) {\r\n                cell.candidates = candidates;\r\n            }\r\n            else {\r\n                cell.candidates = [];\r\n            }\r\n        }\r\n    }\r\n    if (consoleLog)\r\n        console.groupEnd();\r\n    if (consoleLog)\r\n        console.groupCollapsed(\"columns\");\r\n    //columns work\r\n    for (let i = 0; i < 9; i++) {\r\n        let columnNumbers = [];\r\n        for (let j = 0; j < 9; j++) {\r\n            let value = grid[i + j * 9].value;\r\n            if (value != undefined)\r\n                columnNumbers.push(value);\r\n        }\r\n        //@ts-ignore\r\n        columnNumbers = [...new Set(columnNumbers)];\r\n        if (consoleLog)\r\n            console.log(`column n°${i}`, columnNumbers);\r\n        for (let index = 0; index < 9; index++) {\r\n            let cell = grid[i + index * 9];\r\n            cell.candidates = cell.candidates.filter(number => columnNumbers.indexOf(number) == -1);\r\n        }\r\n    }\r\n    if (consoleLog)\r\n        console.groupEnd();\r\n    //squares work\r\n    if (consoleLog)\r\n        console.groupCollapsed(\"squares\");\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            let indexes = [\r\n                0 + j * 3 + i * 27,\r\n                1 + j * 3 + i * 27,\r\n                2 + j * 3 + i * 27,\r\n                9 + j * 3 + i * 27,\r\n                10 + j * 3 + i * 27,\r\n                11 + j * 3 + i * 27,\r\n                18 + j * 3 + i * 27,\r\n                19 + j * 3 + i * 27,\r\n                20 + j * 3 + i * 27,\r\n            ];\r\n            let squareNumbers = indexes.map(index => grid[index].value);\r\n            //@ts-ignore\r\n            squareNumbers = [...new Set(squareNumbers)].filter(number => number != undefined);\r\n            if (consoleLog)\r\n                console.log(`square n°${j + 3 * i}`, squareNumbers);\r\n            for (let iter = 0; iter < 9; iter++) {\r\n                let index = indexes[iter];\r\n                let cell = grid[index];\r\n                cell.candidates = cell.candidates.filter(number => squareNumbers.indexOf(number) == -1);\r\n            }\r\n        }\r\n    }\r\n    if (consoleLog)\r\n        console.groupEnd();\r\n    if (consoleLog)\r\n        console.groupEnd();\r\n    return grid;\r\n};\r\nexport { getRows, getColumns, getSquares, isCandidate, copyGrid, calculateCandidates };\r\n","import { writable } from \"svelte/store\"\r\nimport { calculateCandidates } from './solver/utils'\r\n\r\n\r\n\r\nexport const currentFocus = writable(undefined)\r\n\r\nexport const hint = writable(undefined)\r\n\r\nexport const highlightCase = writable(undefined)\r\n\r\n\r\nlet board = JSON.parse(\"[{\\\"index\\\":0,\\\"candidates\\\":[3,4,6,7,8,9]},{\\\"index\\\":1,\\\"candidates\\\":[1,3,4,7,9]},{\\\"index\\\":2,\\\"candidates\\\":[1,3,4,6,8,9]},{\\\"index\\\":3,\\\"candidates\\\":[1,2,3,5,7]},{\\\"index\\\":4,\\\"candidates\\\":[1,2,4,5,6]},{\\\"index\\\":5,\\\"candidates\\\":[1,2,4,6,7,9]},{\\\"index\\\":6,\\\"candidates\\\":[1,3,4,5]},{\\\"index\\\":7,\\\"candidates\\\":[1,2,6]},{\\\"index\\\":8,\\\"candidates\\\":[2,3,6]},{\\\"index\\\":9,\\\"value\\\":2,\\\"candidates\\\":[]},{\\\"index\\\":10,\\\"candidates\\\":[1,3,4,7]},{\\\"index\\\":11,\\\"candidates\\\":[1,3,4,6]},{\\\"index\\\":12,\\\"candidates\\\":[1,3,5,7]},{\\\"index\\\":13,\\\"candidates\\\":[1,4,5,6]},{\\\"index\\\":14,\\\"candidates\\\":[1,4,6,7]},{\\\"index\\\":15,\\\"candidates\\\":[1,3,4,5]},{\\\"index\\\":16,\\\"value\\\":8,\\\"candidates\\\":[]},{\\\"index\\\":17,\\\"value\\\":9,\\\"candidates\\\":[]},{\\\"index\\\":18,\\\"value\\\":5,\\\"candidates\\\":[]},{\\\"index\\\":19,\\\"candidates\\\":[1,3,4,9]},{\\\"index\\\":20,\\\"candidates\\\":[1,3,4,6,9]},{\\\"index\\\":21,\\\"candidates\\\":[1,2,3]},{\\\"index\\\":22,\\\"candidates\\\":[1,2,4,6]},{\\\"index\\\":23,\\\"value\\\":8,\\\"candidates\\\":[]},{\\\"index\\\":24,\\\"value\\\":7,\\\"candidates\\\":[]},{\\\"index\\\":25,\\\"candidates\\\":[1,2,6]},{\\\"index\\\":26,\\\"candidates\\\":[2,3,6]},{\\\"index\\\":27,\\\"candidates\\\":[6,7,8]},{\\\"index\\\":28,\\\"candidates\\\":[1,7]},{\\\"index\\\":29,\\\"value\\\":5,\\\"candidates\\\":[]},{\\\"index\\\":30,\\\"candidates\\\":[1,7,8]},{\\\"index\\\":31,\\\"value\\\":9,\\\"candidates\\\":[]},{\\\"index\\\":32,\\\"candidates\\\":[1,6,7]},{\\\"index\\\":33,\\\"value\\\":2,\\\"candidates\\\":[]},{\\\"index\\\":34,\\\"value\\\":3,\\\"candidates\\\":[]},{\\\"index\\\":35,\\\"value\\\":4,\\\"candidates\\\":[]},{\\\"index\\\":36,\\\"candidates\\\":[4,8]},{\\\"index\\\":37,\\\"candidates\\\":[1,2,4]},{\\\"index\\\":38,\\\"candidates\\\":[1,4,8]},{\\\"index\\\":39,\\\"candidates\\\":[1,2,8]},{\\\"index\\\":40,\\\"value\\\":3,\\\"candidates\\\":[]},{\\\"index\\\":41,\\\"value\\\":5,\\\"candidates\\\":[]},{\\\"index\\\":42,\\\"value\\\":6,\\\"candidates\\\":[]},{\\\"index\\\":43,\\\"value\\\":9,\\\"candidates\\\":[]},{\\\"index\\\":44,\\\"value\\\":7,\\\"candidates\\\":[]},{\\\"index\\\":45,\\\"candidates\\\":[3,6,7,9]},{\\\"index\\\":46,\\\"candidates\\\":[2,3,7,9]},{\\\"index\\\":47,\\\"candidates\\\":[3,6,9]},{\\\"index\\\":48,\\\"value\\\":4,\\\"candidates\\\":[]},{\\\"index\\\":49,\\\"candidates\\\":[2,6]},{\\\"index\\\":50,\\\"candidates\\\":[2,6,7]},{\\\"index\\\":51,\\\"value\\\":8,\\\"candidates\\\":[]},{\\\"index\\\":52,\\\"value\\\":5,\\\"candidates\\\":[]},{\\\"index\\\":53,\\\"value\\\":1,\\\"candidates\\\":[]},{\\\"index\\\":54,\\\"candidates\\\":[3,4,9]},{\\\"index\\\":55,\\\"candidates\\\":[3,4,5,9]},{\\\"index\\\":56,\\\"value\\\":7,\\\"candidates\\\":[]},{\\\"index\\\":57,\\\"candidates\\\":[1,2,5,8]},{\\\"index\\\":58,\\\"candidates\\\":[1,2,4,5,8]},{\\\"index\\\":59,\\\"candidates\\\":[1,2,4]},{\\\"index\\\":60,\\\"candidates\\\":[1,3]},{\\\"index\\\":61,\\\"candidates\\\":[1,2,6]},{\\\"index\\\":62,\\\"candidates\\\":[2,3,6]},{\\\"index\\\":63,\\\"value\\\":1,\\\"candidates\\\":[]},{\\\"index\\\":64,\\\"value\\\":8,\\\"candidates\\\":[]},{\\\"index\\\":65,\\\"value\\\":2,\\\"candidates\\\":[]},{\\\"index\\\":66,\\\"value\\\":6,\\\"candidates\\\":[]},{\\\"index\\\":67,\\\"value\\\":7,\\\"candidates\\\":[]},{\\\"index\\\":68,\\\"value\\\":3,\\\"candidates\\\":[]},{\\\"index\\\":69,\\\"value\\\":9,\\\"candidates\\\":[]},{\\\"index\\\":70,\\\"value\\\":4,\\\"candidates\\\":[]},{\\\"index\\\":71,\\\"value\\\":5,\\\"candidates\\\":[]},{\\\"index\\\":72,\\\"candidates\\\":[3,4]},{\\\"index\\\":73,\\\"value\\\":6,\\\"candidates\\\":[]},{\\\"index\\\":74,\\\"candidates\\\":[3,4]},{\\\"index\\\":75,\\\"value\\\":9,\\\"candidates\\\":[]},{\\\"index\\\":76,\\\"candidates\\\":[1,2,4,5]},{\\\"index\\\":77,\\\"candidates\\\":[1,2,4]},{\\\"index\\\":78,\\\"candidates\\\":[1,3]},{\\\"index\\\":79,\\\"candidates\\\":[1,2,7]},{\\\"index\\\":80,\\\"value\\\":8,\\\"candidates\\\":[]}]\")\r\n\r\nfor (let i = 0; i < 81; i++) {\r\n    let cell = board[i]\r\n    board[i] = { index: cell.index, value: cell.value, candidates: cell.candidates }\r\n}\r\n\r\n\r\nconst generateEmptyGrid = () => {\r\n    let grid = []\r\n    for (let i = 0; i < 81; i++) {\r\n        grid.push({ index: i, value: undefined, candidates: [1, 2, 3, 4, 5, 6, 7, 8, 9] })\r\n    }\r\n    return grid\r\n}\r\n\r\nconst createSudokuStore = () => {\r\n    const { subscribe, update } = writable(generateEmptyGrid())\r\n\r\n    return {\r\n        subscribe,\r\n        setCellValue: (index, value) => {\r\n            update(currentGrid => {\r\n                currentGrid[index].value = value\r\n                return currentGrid\r\n            })\r\n        },\r\n        updateCandidates: () => {\r\n            update(currentGrid => calculateCandidates(currentGrid))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport let sudoku = createSudokuStore()\r\n\r\n//console.log(\"sudoku store: \", sudoku.updateCandidates)","import { writable } from 'svelte/store'\r\n\r\nlet current_id = 0\r\n\r\nconst createNotificationStore = () => {\r\n    const { subscribe, set, update } = writable(undefined)\r\n\r\n    return {\r\n        subscribe,\r\n        notify: (message, status, type = undefined) => {\r\n            update(current => {\r\n                if (current != undefined) {\r\n\r\n                    setTimeout(() => {\r\n                        set({ id: ++current_id, type, message, status })\r\n                    }, 25)\r\n                    return undefined\r\n                }\r\n\r\n                return { id: ++current_id, type, message, status }\r\n            })\r\n            return current_id\r\n        },\r\n        dismiss: (id) => {\r\n            if (id == current_id) {\r\n                update(current => ({ ...current, dismiss: true }))\r\n                setTimeout(() => {\r\n                    set(undefined)\r\n                }, 200)\r\n            }\r\n        },\r\n    }\r\n}\r\n\r\nexport const notificationManager = createNotificationStore()","<script>\r\n    let innerWidth;\r\n    let innerHeight;\r\n\r\n    let id\r\n\r\n    import { sudoku } from './stores'\r\n\r\n    import { notificationManager } from './notification_manager'\r\n\r\n    const logClick = () => {\r\n        console.log($sudoku)\r\n    }\r\n\r\n    const updateClick = () => {\r\n        sudoku.updateCandidates()\r\n    }\r\n\r\n    const notification = () => {\r\n        id = notificationManager.notify(\"This is a notif\", \"success\", 4)\r\n    }\r\n\r\n    const closeNotif = () => {\r\n        notificationManager.dismiss(id)\r\n    }\r\n</script>\r\n\r\n<style>\r\n    div {\r\n        position: fixed;\r\n        left: 0;\r\n        top: 0;\r\n        margin: 5px;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n</style>\r\n\r\n<svelte:window bind:innerWidth bind:innerHeight />\r\n\r\n<div>\r\n    <!--<p>{innerWidth} x {innerHeight}</p>\r\n    <button on:click={logClick}>Log grid</button>\r\n    <button on:click={updateClick}>Update Candidates</button>-->\r\n\r\n    <!--<button on:click={notification}>notification</button>\r\n    <button on:click={closeNotif}>close notif</button>-->\r\n</div>","class Hint {\r\n    constructor(index, value, hint) {\r\n        this.index = index;\r\n        this.value = value;\r\n        this.hint = hint;\r\n    }\r\n    getIndex() {\r\n        return this.index;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    getHint() {\r\n        return this.hint;\r\n    }\r\n    getAsObject() {\r\n        return {\r\n            index: this.getIndex(),\r\n            value: this.getValue(),\r\n            hint: this.getHint(),\r\n        };\r\n    }\r\n}\r\nexport default Hint;\r\n","import Hint from './Hint';\r\nimport { getRows, getColumns, getSquares } from './utils';\r\nconst nakedSingle = (grid) => {\r\n    for (let cell of grid) {\r\n        if (cell.candidates.length == 1) {\r\n            let value = cell.candidates[0];\r\n            return new Hint(cell.index, value, `La case mise en valeur ne peut contenir que un ${value}`);\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nconst hiddenSingle = (grid) => {\r\n    const rows = getRows(grid);\r\n    const columns = getColumns(grid);\r\n    const squares = getSquares(grid);\r\n    const searchHiddenSingleInArray = (array) => {\r\n        for (let subarray of array) {\r\n            let count = {\r\n                1: { number: 0, index: -1 },\r\n                2: { number: 0, index: -1 },\r\n                3: { number: 0, index: -1 },\r\n                4: { number: 0, index: -1 },\r\n                5: { number: 0, index: -1 },\r\n                6: { number: 0, index: -1 },\r\n                7: { number: 0, index: -1 },\r\n                8: { number: 0, index: -1 },\r\n                9: { number: 0, index: -1 },\r\n            };\r\n            for (let cell of subarray) {\r\n                for (let candidate of cell.candidates) {\r\n                    count[candidate].number = count[candidate].number + 1;\r\n                    count[candidate].index = cell.index;\r\n                }\r\n            }\r\n            for (let i = 1; i <= 9; i++) {\r\n                if (count[i].number == 1)\r\n                    return { index: count[i].index, value: i };\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    let hint = searchHiddenSingleInArray(rows);\r\n    if (hint != undefined)\r\n        return new Hint(hint.index, hint.value, `La case mise en valeur est la seul de la ligne à pouvoir contenir le chiffre ${hint.value}`);\r\n    hint = searchHiddenSingleInArray(columns);\r\n    if (hint != undefined)\r\n        return new Hint(hint.index, hint.value, `La case mise en valeur est la seul de la colones à pouvoir contenir le chiffre ${hint.value}`);\r\n    hint = searchHiddenSingleInArray(squares);\r\n    if (hint != undefined)\r\n        return new Hint(hint.index, hint.value, `La case mise en valeur est la seul du carré à pouvoir contenir le chiffre ${hint.value}`);\r\n    return undefined;\r\n};\r\nexport { nakedSingle, hiddenSingle };\r\n","import { nakedSingle, hiddenSingle } from './SolvingTechniques';\r\nimport { isCandidate } from './utils';\r\nconst getHint = (grid) => {\r\n    let hint;\r\n    hint = nakedSingle(grid);\r\n    if (hint != undefined)\r\n        return hint;\r\n    hint = hiddenSingle(grid);\r\n    if (hint != undefined)\r\n        return hint;\r\n    return undefined;\r\n};\r\nlet solutions = 0;\r\nconst bruteForce = (grid) => {\r\n    //grid = copyGrid(grid)\r\n    for (let cell of grid) {\r\n        if (cell.value == undefined) {\r\n            for (let n = 1; n <= 9; n++) {\r\n                if (isCandidate(grid, cell.index, n)) {\r\n                    cell.value = n;\r\n                    bruteForce(grid);\r\n                    cell.value = undefined;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    solutions++;\r\n    console.log(solutions);\r\n};\r\nexport { getHint, bruteForce };\r\n","import { writable, get } from 'svelte/store'\r\nimport { sudoku, highlightCase } from './stores'\r\nimport { notificationManager } from './notification_manager'\r\nimport { getHint } from './solver/solver.js'\r\nimport { copyGrid, calculateCandidates } from './solver/utils.js'\r\n\r\nexport const activeTask = writable(undefined)\r\n\r\nactiveTask.subscribe((task) => {\r\n    switch (task) {\r\n        case 'hint':\r\n            manageHint()\r\n            break\r\n\r\n        case 'check':\r\n            manageCheck()\r\n            break\r\n    }\r\n})\r\n\r\n\r\nconst manageHint = async () => {\r\n    activeTask.set(undefined)\r\n    await sudoku.updateCandidates()\r\n\r\n    let hint = getHint(get(sudoku))?.getAsObject()\r\n    if (hint != undefined) {\r\n        highlightCase.set(hint.index)\r\n        notificationManager.notify(hint.hint, 'success', 'hint')\r\n    } else {\r\n        notificationManager.notify(\"Pas d'indice disponible\", 'danger', 'hint')\r\n    }\r\n}\r\n\r\n\r\nconst manageCheck = () => {\r\n    activeTask.set(undefined)\r\n\r\n\r\n    let hint\r\n\r\n    let grid = copyGrid(get(sudoku))\r\n\r\n    do {\r\n        grid = calculateCandidates(grid)\r\n        hint = getHint(grid)?.getAsObject()\r\n        if (hint != undefined) {\r\n            grid[hint.index].value = hint.value\r\n        }\r\n    } while (hint != undefined)\r\n\r\n    for (let i = 0; i < 81; i++) {\r\n        if (grid[i].value == undefined) {\r\n            notificationManager.notify('Je ne peux pas résoudre le sudoku', 'danger')\r\n\r\n            return\r\n        }\r\n    }\r\n\r\n    notificationManager.notify('Le sudoku peut être résolu', 'success')\r\n\r\n\r\n}","export const gridSize = 450\r\nexport const cellSize = Math.round(gridSize / 9)","<script>\r\n    export let value\r\n\r\n    import { createEventDispatcher } from 'svelte'\r\n\r\n    const dispatch = createEventDispatcher()\r\n\r\n    const handleClick = () => {\r\n        dispatch('numberInput', {\r\n            value,\r\n        })\r\n    }\r\n</script>\r\n\r\n<style>\r\n    div {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border: 1px solid rgba(136, 136, 136, 0.2);\r\n        transition: box-shadow .1s;\r\n    }\r\n\r\n    div:hover {\r\n        box-shadow: 0px 5px 15px rgb(0, 0, 0, .2);\r\n    }\r\n\r\n    span {\r\n        text-align: center;\r\n        color: white;\r\n        font-size: 20px;\r\n        font-family: Arial;\r\n        font-weight: 500;\r\n        cursor: default;\r\n    }\r\n</style>\r\n\r\n\r\n<div on:click={handleClick}>\r\n    <span>{value}</span>\r\n</div>\r\n\r\n","<script>\r\n    export let cell\r\n    import { cellSize } from '../responsive'\r\n    import { currentFocus } from '../stores.js'\r\n\r\n    let activate = false\r\n\r\n    let keypad\r\n\r\n    const handleClick = (e) => {\r\n        if (!activate) {\r\n            activate = true\r\n            return\r\n        }\r\n\r\n        let { left, top, width, height } = keypad.getBoundingClientRect()\r\n        let x = e.clientX\r\n        let y = e.clientY\r\n\r\n        if (x <= left || x >= left + width || y <= top || y >= top + height) {\r\n            currentFocus.set(undefined)\r\n        }\r\n    }\r\n\r\n    import NumberButton from './NumberButton.svelte'\r\n</script>\r\n\r\n<style>\r\n    .keypad {\r\n        position: absolute;\r\n        width: 150px;\r\n        height: 150px;\r\n        z-index: 5;\r\n\r\n        display: grid;\r\n        grid-template-columns: repeat(3, calc(100% / 3));\r\n        grid-template-rows: repeat(3, calc(100% / 3));\r\n\r\n        box-shadow: -8px 8px 8px rgba(93, 104, 107, 0.3);\r\n\r\n        background-color: hsla(169, 93%, 42%, 0.6);\r\n\r\n        animation: scaleUp 0.2s ease-out;\r\n        animation-fill-mode: forwards;\r\n        backdrop-filter: blur(2px);\r\n        -webkit-backdrop-filter: blur(2px);\r\n    }\r\n\r\n    @keyframes scaleUp {\r\n        from {\r\n            transform: scale(0.001);\r\n        }\r\n\r\n        to {\r\n            transform: scale(1.2);\r\n        }\r\n    }\r\n</style>\r\n\r\n\r\n<svelte:window on:click={handleClick} />\r\n\r\n<div\r\n    bind:this={keypad}\r\n    class=\"keypad\"\r\n    style=\"top: {cell.getBoundingClientRect().y -\r\n        cellSize}px; left: {cell.getBoundingClientRect().x - cellSize}px\"\r\n>\r\n    {#each Array(9) as _, i}\r\n        <NumberButton value={i + 1} on:numberInput />\r\n    {/each}\r\n</div>\r\n\r\n","<script>\r\n    export let index\r\n    export let value\r\n\r\n    let borderRight = index % 9 != 8\r\n    let borderBottom = Math.floor(index / 9) != 8\r\n\r\n    let largeRight = [2, 5].includes(index % 9)\r\n    let largeBottom = [2, 5].includes(Math.floor(index / 9))\r\n\r\n    import { currentFocus, sudoku, highlightCase } from \"../stores.js\"\r\n\r\n    import { activeTask } from  '../task_manager'\r\n\r\n\r\n    import { notificationManager } from '../notification_manager'\r\n\r\n    import Keypad from \"./Keypad.svelte\"\r\n\r\n    $: isSelected = $currentFocus == index\r\n\r\n    const handleClick = () => {\r\n        if($highlightCase != undefined) highlightCase.set(undefined)\r\n\r\n        if($notificationManager?.type == 'hint') {\r\n            notificationManager.dismiss($notificationManager.id)\r\n        }\r\n\r\n        if ($activeTask == \"erase\") {\r\n            if(value == undefined) activeTask.set(undefined)\r\n            sudoku.setCellValue(index, undefined)\r\n            return\r\n        }\r\n\r\n        if (!isSelected) {\r\n            currentFocus.set(index)\r\n        } else {\r\n            currentFocus.set(undefined)\r\n        }\r\n    }\r\n\r\n    let cell\r\n\r\n    const handleInput = (e) => {\r\n        sudoku.setCellValue(index, e.detail.value)\r\n        \r\n        //value = e.detail.value\r\n        currentFocus.set(undefined)\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .cell {\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        position: relative;\r\n        z-index: 2;\r\n\r\n        font-size: 20px;\r\n        transform: scale(1);\r\n        transition: transform 0.3s ease-out;\r\n    }\r\n\r\n    .borderRight {\r\n        border-right: 2px solid #f5f5f5;\r\n    }\r\n\r\n    .borderBottom {\r\n        border-bottom: 2px solid #f5f5f5;\r\n    }\r\n\r\n    .largeRight {\r\n        border-right: 3px solid #b8b8b8;\r\n    }\r\n\r\n    .largeBottom {\r\n        border-bottom: 3px solid #b8b8b8;\r\n    }\r\n\r\n    .isSelected {\r\n        /*background-color: #07CFAA;*/\r\n        color: white;\r\n\r\n        /*opacity: 0.4;\r\n        transform: scale(3);\r\n        z-index: 4;\r\n        box-shadow: 0px 15px 35px hsla(0.0%, .2);\r\n        border: none;*/\r\n    }\r\n\r\n    .isHighlighted {\r\n        background-color: #07CFAA;\r\n    }\r\n\r\n    span {\r\n        -moz-user-select: none;\r\n        user-select: none;\r\n    }\r\n</style>\r\n\r\n{#if isSelected}\r\n    <Keypad {cell} on:numberInput={handleInput} />\r\n{/if}\r\n\r\n<div\r\n    class:borderRight\r\n    class:borderBottom\r\n    class:largeRight\r\n    class:largeBottom\r\n    class=\"cell\"\r\n    class:isSelected\r\n    class:isHighlighted={$highlightCase == index}\r\n    bind:this={cell}\r\n    on:click={handleClick}\r\n>\r\n    <span>{value || \"\"}</span>\r\n</div>\r\n\r\n\r\n","<script>\r\n    import Cell from \"./Cell.svelte\"\r\n    import { sudoku } from \"../stores.js\"\r\n</script>\r\n\r\n<style>\r\n    div {\r\n        --size: 450px;\r\n        background-color: white;\r\n        width: var(--size);\r\n        height: var(--size);\r\n        box-shadow: -8px 8px 8px rgba(93, 104, 107, 0.3);\r\n        display: grid;\r\n        grid-template-columns: repeat(9, calc(var(--size) / 9));\r\n        grid-template-rows: repeat(9, calc(var(--size) / 9));\r\n    }\r\n</style>\r\n\r\n<div>\r\n    {#each $sudoku as cell}\r\n        <Cell index={cell.index} value={cell.value}/>\r\n    {/each}\r\n</div>\r\n","<script>\r\n    export let width;\r\n    export let height;\r\n    export let color;\r\n</script>\r\n\r\n<svg {width} {height} viewBox=\"0 0 53 53\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M40.28 12.7201V14.8401H45.58C46.1662 14.8401 46.64 14.3663 46.64 13.7801V5.3001C46.64 4.71392 46.1662 4.2401 45.58 4.2401H40.28V6.3601H44.52V8.4801H40.28V10.6001H44.52V12.7201H40.28Z\" fill={color}/>\r\n    <path d=\"M10.4156 12.5473V5.12733C10.4156 4.69909 10.158 4.31113 9.76157 4.14789C9.36513 3.98253 8.90933 4.07369 8.60617 4.37791L5.42617 7.55791L6.92501 9.05675L8.29559 7.68617V12.5473H6.17559V14.6673H12.5356V12.5473H10.4156Z\" fill={color}/>\r\n    <path d=\"M29.4913 23.2692V21.1492H24.1913C23.6051 21.1492 23.1313 21.623 23.1313 22.2092V26.4492C23.1313 27.0354 23.6051 27.5092 24.1913 27.5092H27.3713V29.6292H23.1313V31.7492H28.4313C29.0175 31.7492 29.4913 31.2754 29.4913 30.6892V26.4492C29.4913 25.863 29.0175 25.3892 28.4313 25.3892H25.2513V23.2692H29.4913Z\" fill={color}/>\r\n    <path d=\"M53.0001 1.06043C53.0001 0.474247 52.5263 0.000427246 51.9401 0.000427246H1.06018C0.474002 0.000427246 0.000183105 0.474247 0.000183105 1.06043V51.9404C0.000183105 52.5265 0.474002 53.0004 1.06018 53.0004H51.9401C52.5263 53.0004 53.0001 52.5265 53.0001 51.9404V1.06043ZM19.0802 33.9204V19.0804H33.9201V33.9204H19.0802ZM33.9201 36.0404V50.8804H19.0802V36.0404H33.9201ZM16.9602 33.9204H2.12018V19.0804H16.9602V33.9204ZM19.0802 16.9604V2.12042H33.9201V16.9604H19.0802ZM36.0401 19.0804H50.8801V33.9204H36.0401V19.0804ZM50.8801 16.9604H36.0401V2.12042H50.8801V16.9604ZM16.9602 2.12042V16.9604H2.12018V2.12042H16.9602ZM2.12018 36.0404H16.9602V50.8804H2.12018V36.0404ZM36.0401 50.8804V36.0404H50.8801L50.9914 50.8443L36.0401 50.8804Z\" fill={color}/>\r\n</svg>","<script>\r\n    export let width;\r\n    export let height;\r\n    export let color;\r\n</script>\r\n\r\n<svg {width} {height} viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M17.2694 34.0833H27.9783H17.2694ZM22.625 2V4.29167V2ZM37.2092 8.04083L35.589 9.66104L37.2092 8.04083ZM43.25 22.625H40.9583H43.25ZM4.29167 22.625H2H4.29167ZM9.66104 9.66104L8.04083 8.04083L9.66104 9.66104ZM14.5217 30.7283C12.9195 29.1257 11.8285 27.0841 11.3866 24.8614C10.9447 22.6388 11.1718 20.3351 12.0392 18.2415C12.9065 16.148 14.3752 14.3586 16.2594 13.0997C18.1437 11.8407 20.3589 11.1688 22.625 11.1688C24.8911 11.1688 27.1063 11.8407 28.9906 13.0997C30.8748 14.3586 32.3435 16.148 33.2108 18.2415C34.0782 20.3351 34.3053 22.6388 33.8634 24.8614C33.4215 27.0841 32.3305 29.1257 30.7283 30.7283L29.4725 31.9819C28.7545 32.7 28.1851 33.5524 27.7966 34.4906C27.4081 35.4288 27.2082 36.4344 27.2083 37.4498V38.6667C27.2083 39.8822 26.7254 41.048 25.8659 41.9076C25.0064 42.7671 23.8406 43.25 22.625 43.25C21.4094 43.25 20.2436 42.7671 19.3841 41.9076C18.5246 41.048 18.0417 39.8822 18.0417 38.6667V37.4498C18.0417 35.3988 17.2258 33.4302 15.7775 31.9819L14.5217 30.7283Z\" stroke={color} stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n</svg>\r\n    ","<script>\r\n    export let width;\r\n    export let height;\r\n    export let color;\r\n</script>\r\n\r\n<svg {width} {height} viewBox=\"0 0 30 29\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M2 15.5785L13.0701 26.5L22.7011 10.227L28 2\" stroke={color} stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n</svg>","<script>\r\n    export let width;\r\n    export let height;\r\n    export let color;\r\n</script>\r\n\r\n<svg {width} {height} viewBox=\"0 0 35 35\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M12.5 2V5.5V2ZM23 2V5.5V2ZM12.5 30V33.5V30ZM23 30V33.5V30ZM5.5 12.5H2H5.5ZM5.5 23H2H5.5ZM33.5 12.5H30H33.5ZM33.5 23H30H33.5ZM9 30H26.5C27.4283 30 28.3185 29.6313 28.9749 28.9749C29.6313 28.3185 30 27.4283 30 26.5V9C30 8.07174 29.6313 7.1815 28.9749 6.52513C28.3185 5.86875 27.4283 5.5 26.5 5.5H9C8.07174 5.5 7.1815 5.86875 6.52513 6.52513C5.86875 7.1815 5.5 8.07174 5.5 9V26.5C5.5 27.4283 5.86875 28.3185 6.52513 28.9749C7.1815 29.6313 8.07174 30 9 30ZM12.5 12.5H23V23H12.5V12.5Z\" stroke={color} stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n</svg>","<script>\r\n    export let width;\r\n    export let height;\r\n    export let color;\r\n</script>\r\n\r\n<svg {width} {height} viewBox=\"0 0 297 297\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t<path d=\"M287.55,260.218H149.47l131.846-131.846c10.437-10.437,10.437-27.419,0-37.856l-64.808-64.808\r\n\t\t\tc-10.437-10.437-27.419-10.436-37.856,0L11.788,192.573c-5.055,5.056-7.84,11.778-7.84,18.928c0,7.15,2.785,13.872,7.84,18.928\r\n\t\t\tl29.79,29.79H9.45c-5.218,0-9.45,4.231-9.45,9.45c0,5.219,4.231,9.45,9.45,9.45h278.1c5.218,0,9.45-4.231,9.45-9.45\r\n\t\t\tC297,264.45,292.769,260.218,287.55,260.218z M192.016,39.072c3.069-3.069,8.063-3.067,11.128,0l64.808,64.808\r\n\t\t\tc1.487,1.486,2.305,3.462,2.305,5.565c0,2.101-0.819,4.078-2.305,5.564L159.309,223.651l-75.936-75.936L192.016,39.072z\r\n\t\t\t M122.742,260.219H68.306l-43.154-43.155c-3.068-3.067-3.068-8.06,0-11.127l44.858-44.858l75.936,75.936L122.742,260.219z\" fill={color}/>\r\n</svg>","<script>\r\n    export let name\r\n    name = name.toLowerCase()\r\n    import Candidates from '../icons/Candidates.svelte'\r\n    import Hint from '../icons/Hint.svelte'\r\n    import Check from '../icons/Check.svelte'\r\n    import Solve from '../icons/Solve.svelte'\r\n    import Erase from '../icons/Erase.svelte'\r\n\r\n    import { activeTask } from  '../task_manager'\r\n\r\n\r\n    let defaultIconColor = '#D3D3D3'\r\n    let selectedIconColor = '#04CDAA'\r\n\r\n    const capitalize = (text) => {\r\n        return text[0].toUpperCase() + text.slice(1).toLowerCase()\r\n    }\r\n\r\n    const handleClick = () => {\r\n        if ($activeTask == name) {\r\n            activeTask.set(undefined)\r\n        } else {\r\n            activeTask.set(name)\r\n        }\r\n    }\r\n\r\n    $: isSelected = $activeTask == name\r\n\r\n    $: color = isSelected ? selectedIconColor : defaultIconColor\r\n</script>\r\n\r\n<style>\r\n    .tool {\r\n        display: inline-flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        width: auto;\r\n    }\r\n\r\n    span {\r\n        color: #dcdbe0;\r\n        font-family: Arial;\r\n        font-weight: 700;\r\n        margin-top: 5px;\r\n        font-size: 14px;\r\n    }\r\n\r\n    .isSelected {\r\n        color: #04cdaa;\r\n    }\r\n</style>\r\n\r\n\r\n<div class=\"tool\" on:click={handleClick}>\r\n    {#if name == 'candidates'}\r\n        <Candidates width={35} height={35} {color} />\r\n    {:else if name == 'hint'}\r\n        <Hint width={35} height={35} {color} />\r\n    {:else if name == 'check'}\r\n        <Check width={25} height={25} {color} />\r\n    {:else if name == 'solve'}\r\n        <Solve width={25} height={25} {color} />\r\n    {:else if name == 'erase'}\r\n        <Erase width={25} height={25} {color} />\r\n    {/if}\r\n\r\n    <span class:isSelected>{capitalize(name)}</span>\r\n</div>\r\n\r\n","<script>\r\n    import ToolbarElement from './ToolbarElement.svelte'\r\n    import { sudoku } from '../stores.js'\r\n    import { activeTask } from  '../task_manager'\r\n\r\n    import { getHint } from '../solver/solver'\r\n\r\n    activeTask.subscribe(async (task) => {\r\n        if (task == 'solve') {\r\n            let hint = -1\r\n\r\n            let interval = setInterval(async () => {\r\n                if (hint == undefined) {\r\n                    clearInterval(interval)\r\n                    activeTask.set(undefined)\r\n                    return\r\n                }\r\n\r\n                await sudoku.updateCandidates()\r\n\r\n                hint = getHint($sudoku)?.getAsObject()\r\n                if (hint != undefined) {\r\n                    //@ts-ignore\r\n                    sudoku.setCellValue(hint.index, hint.value)\r\n                }\r\n            }, 50)\r\n        }\r\n\r\n        \r\n    })\r\n</script>\r\n\r\n<div>\r\n    <ToolbarElement name=\"candidates\" />\r\n    <ToolbarElement name=\"hint\" />\r\n    <ToolbarElement name=\"check\" />\r\n    <ToolbarElement name=\"solve\" />\r\n    <ToolbarElement name=\"erase\" />\r\n</div>\r\n\r\n<style>\r\n    div {\r\n        width: 450px;\r\n        height: 65px;\r\n        background-color: white;\r\n        margin-top: 25px;\r\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n        border-radius: 25px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-around;\r\n    }\r\n</style>\r\n","<style>\r\n    .content {\r\n        margin-left: 25px;\r\n    }\r\n\r\n    svg {\r\n        width: 24px;\r\n        height: 24px;\r\n        margin-right: 20px;\r\n    }\r\n\r\n    .notification {\r\n        position: absolute;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 50px;\r\n        background-color: #F5F5F5;\r\n        box-shadow: 0px 5px 15px rgba(0, 0, 0, .2);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        z-index: 1000;\r\n\r\n        animation: showNotif 0.2s ease-in-out forwards;\r\n    }\r\n\r\n    .success {\r\n        background-color: #48C78E;\r\n    }\r\n\r\n    .success > .content {\r\n        color: white;\r\n    }\r\n\r\n    .danger {\r\n        background-color: #F14668;\r\n    }\r\n\r\n    .danger > .content {\r\n        color: white;\r\n    }\r\n\r\n    @keyframes showNotif {\r\n        from {\r\n            transform: translateY(-100%);\r\n        }\r\n\r\n        to {\r\n            transfrom: translateY(0);\r\n        }\r\n    }\r\n\r\n    .hide {\r\n        transform: translateY(-100%);\r\n        animation: hideNotif 0.2s ease-in-out forwards;\r\n    }\r\n\r\n    @keyframes hideNotif {\r\n        from {\r\n            transform: translateY(0);\r\n        }\r\n\r\n        to {\r\n            transfrom: translateY(-100%);\r\n        }\r\n    }\r\n    \r\n</style>\r\n\r\n\r\n<script>\r\n    import { notificationManager } from '../notification_manager'\r\n\r\n    const crossClick = () => {\r\n        notificationManager.dismiss($notificationManager.id)\r\n    }\r\n</script>\r\n\r\n\r\n{#if $notificationManager != undefined}\r\n\r\n<div class=\"notification {$notificationManager.status}\" class:hide={$notificationManager.dismiss}>\r\n    <div class=\"content\">\r\n        <p>{$notificationManager.message}</p>\r\n    </div>\r\n\r\n    <svg on:click={crossClick} xmlns=\"http://www.w3.org/2000/svg\" fill=\"white\" viewBox=\"0 0 24 24\" stroke=\"white\">\r\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\r\n    </svg>\r\n</div>\r\n\r\n{/if}","//@ts-ignore\r\nimport App from './App.svelte';\r\nvar app = new App({\r\n    target: document.body\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","get_store_value","value","_","component_subscribe","component","callback","$$","on_destroy","push","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","setProperty","toggle_class","toggle","classList","current_component","set_current_component","createEventDispatcher","Error","get_current_component","type","detail","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","bound","on_disconnect","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","s","invalidate","subscriber","copyGrid","grid","newGrid","cell","assign","reducer","accumulator","calculateCandidates","lineNumbers","reduce","candidates","number","undefined","columnNumbers","j","indexes","squareNumbers","iter","currentFocus","highlightCase","board","JSON","parse","sudoku","generateEmptyGrid","setCellValue","currentGrid","updateCandidates","createSudokuStore","current_id","notificationManager","notify","message","status","current","id","setTimeout","dismiss","createNotificationStore","innerWidth","innerHeight","Hint","hint","getIndex","getValue","getHint","nakedSingle","rows","getRows","columns","getColumns","squares","getSquares","searchHiddenSingleInArray","array","subarray","count","1","2","3","4","5","6","7","8","9","candidate","hiddenSingle","activeTask","task","manageHint","manageCheck","async","get","getAsObject","cellSize","Math","round","gridSize","dispatch","getBoundingClientRect","y","x","keypad","activate","left","top","width","height","clientX","clientY","borderRight","borderBottom","floor","largeRight","includes","largeBottom","isSelected","$currentFocus","$highlightCase","$notificationManager","$activeTask","color","toLowerCase","toUpperCase","interval","setInterval","clearInterval","$sudoku","body"],"mappings":"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"}